import torch
import abc
from typing import Dict, Union


class Metric:
    """
    Base class for prediction metric/loss function
    """
    @abc.abstractmethod
    def __init__(self):
        raise NotImplementedError()

    @abc.abstractmethod
    def compute(self, predictions: Union[torch.Tensor, Dict], ground_truth: Union[torch.Tensor, Dict]) -> torch.Tensor:
        """
        Main function that computes the metric
        :param predictions: Predictions generated by the model
        :param ground_truth: Ground truth labels
        :return metric: Tensor with computed value of metric.
        """
        raise NotImplementedError()
